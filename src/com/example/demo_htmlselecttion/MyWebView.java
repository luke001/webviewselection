package com.example.demo_htmlselecttion;import java.io.InputStream;import android.annotation.SuppressLint;import android.app.Activity;import android.content.Context;import android.util.AttributeSet;import android.util.DisplayMetrics;import android.util.Log;import android.view.Display;import android.view.MotionEvent;import android.view.View;import android.view.View.OnLongClickListener;import android.view.View.OnTouchListener;import android.view.WindowManager;import android.webkit.ConsoleMessage;import android.webkit.WebChromeClient;import android.webkit.WebResourceResponse;import android.webkit.WebSettings.LayoutAlgorithm;import android.webkit.WebView;import android.webkit.WebViewClient;@SuppressLint("NewApi")public class MyWebView extends WebView implements OnTouchListener,		OnLongClickListener {	private float mScrollDiffY = 0;	private float mLastTouchY = 0;	private float mScrollDiffX = 0;	private float mLastTouchX = 0;	protected Context ctx;	private boolean isInSelection;	public MyWebView(Context context, AttributeSet attrs) {		super(context, attrs);		this.ctx = context;		this.setOnLongClickListener(this);		this.setOnTouchListener(this);		this.getSettings().setSupportZoom(false);		this.getSettings().setPluginsEnabled(true);		this.getSettings().setJavaScriptCanOpenWindowsAutomatically(true);		this.getSettings().setJavaScriptEnabled(true);		this.setHorizontalScrollBarEnabled(false);		this.getSettings().setLayoutAlgorithm(LayoutAlgorithm.NORMAL);		this.setWebChromeClient(new WebChromeClient() {			public boolean onConsoleMessage(ConsoleMessage message) {				Log.d("artbook",						message.message() + " -- From line "								+ message.lineNumber() + " of "								+ message.sourceId());				return true;			}		});		final Display display = ((Activity) this.getContext())				.getWindowManager().getDefaultDisplay();		final int height = ArtBookUtils.px2dip(this.getContext(),				Float.valueOf(display.getHeight() - (84 + 90)));		final int width = ArtBookUtils.px2dip(this.getContext(),				Float.valueOf(display.getWidth()));		this.setWebViewClient(new WebViewClient() {			@Override			public void onPageFinished(WebView view, String url) {			}			@Override			public WebResourceResponse shouldInterceptRequest(WebView view,					String url) {				Log.v("^^^^^", url);				if (url.endsWith(".css")) {					Log.v("%%%%%%%%%", url);				}				return getUtf8EncodedCssWebResourceResponse(ArtBookUtils						.changeWidthAndHeight(MyWebView.this.getContext(),								"book.css", width, height));			}			private WebResourceResponse getUtf8EncodedCssWebResourceResponse(					InputStream data) {				return new WebResourceResponse("text/css", "UTF-8", data);			}		});		this.setHorizontalScrollBarEnabled(false);		this.loadUrl("file:///android_asset/index.html");	}	@Override	public boolean onLongClick(View v) {		this.loadUrl("javascript:android.selection.longTouch();");		isInSelection = true;		return true;	}	@Override	public boolean onTouch(View v, MotionEvent event) {		float xPoint = getDensityIndependentValue(event.getX(), ctx)				/ getDensityIndependentValue(this.getScale(), ctx);		float yPoint = getDensityIndependentValue(event.getY(), ctx)				/ getDensityIndependentValue(this.getScale(), ctx);		// TODO: Need to update this to use this.getScale() as a factor.		if (event.getAction() == MotionEvent.ACTION_DOWN) {			String startTouchUrl = String.format(					"javascript:android.selection.startTouch(%f, %f);", xPoint,					yPoint);			mLastTouchX = xPoint;			mLastTouchY = yPoint;			this.loadUrl(startTouchUrl);		} else if (event.getAction() == MotionEvent.ACTION_UP) {			// Check for scrolling flag			mScrollDiffX = 0;			mScrollDiffY = 0;			if (isInSelection) {				String moveTouchUrl = String						.format("javascript:android.selection.endTouch();");				this.loadUrl(moveTouchUrl);			}			isInSelection = false;		} else if (event.getAction() == MotionEvent.ACTION_MOVE) {			mScrollDiffX += (xPoint - mLastTouchX);			mScrollDiffY += (yPoint - mLastTouchY);			mLastTouchX = xPoint;			mLastTouchY = yPoint;			if (isInSelection ) {				String moveTouchUrl = String.format(						"javascript:android.selection.moveTouch(%f, %f);",						xPoint, yPoint);				this.loadUrl(moveTouchUrl);				return true;			}		}		return false;	}	/**	 * Returns the density independent value of the given float	 * 	 * @param val	 * @param ctx	 * @return	 */	public float getDensityIndependentValue(float val, Context ctx) {		Display display = ((WindowManager) ctx				.getSystemService(Context.WINDOW_SERVICE)).getDefaultDisplay();		DisplayMetrics metrics = new DisplayMetrics();		display.getMetrics(metrics);		return val / (metrics.densityDpi / 160f);	}}