package com.example.demo_htmlselecttion;import android.content.Context;import android.util.AttributeSet;import android.util.DisplayMetrics;import android.util.Log;import android.view.Display;import android.view.MotionEvent;import android.view.View;import android.view.View.OnLongClickListener;import android.view.View.OnTouchListener;import android.view.WindowManager;import android.webkit.ConsoleMessage;import android.webkit.WebChromeClient;import android.webkit.WebView;public class MyWebView extends WebView implements OnTouchListener,		OnLongClickListener {	private float mScrollDiffY = 0;	private float mLastTouchY = 0;	private float mScrollDiffX = 0;	private float mLastTouchX = 0;	protected Context ctx;	public MyWebView(Context context, AttributeSet attrs) {		super(context, attrs);		this.ctx = context;		this.setOnLongClickListener(this);		this.setOnTouchListener(this);		this.getSettings().setSupportZoom(false);		this.getSettings().setPluginsEnabled(true);		this.getSettings().setJavaScriptCanOpenWindowsAutomatically(true);		this.getSettings().setJavaScriptEnabled(true);		this.getSettings().setLightTouchEnabled(true);		this.setWebChromeClient(new WebChromeClient() {			public boolean onConsoleMessage(ConsoleMessage message) {				Log.d("artbook",						message.message() + " -- From line "								+ message.lineNumber() + " of "								+ message.sourceId());				return true;			}		});		this.setHorizontalScrollBarEnabled(false);		this.loadUrl("file:///android_asset/index.html");			}	@Override	public boolean onLongClick(View v) {		this.loadUrl("javascript:android.selection.longTouch();");		return true;	}	@Override	public boolean onTouch(View v, MotionEvent event) {		float xPoint = getDensityIndependentValue(event.getX(), ctx)/ getDensityIndependentValue(this.getScale(), ctx);		float yPoint = getDensityIndependentValue(event.getY(), ctx)/ getDensityIndependentValue(this.getScale(), ctx);		// TODO: Need to update this to use this.getScale() as a factor.		if (event.getAction() == MotionEvent.ACTION_DOWN) {			String startTouchUrl = String.format("javascript:android.selection.startTouch(%f, %f);", xPoint,yPoint);			mLastTouchX = xPoint;			mLastTouchY = yPoint;			this.loadUrl(startTouchUrl);		} else if (event.getAction() == MotionEvent.ACTION_UP) {			// Check for scrolling flag			mScrollDiffX = 0;			mScrollDiffY = 0;		} else if (event.getAction() == MotionEvent.ACTION_MOVE) {			mScrollDiffX += (xPoint - mLastTouchX);			mScrollDiffY += (yPoint - mLastTouchY);			mLastTouchX = xPoint;			mLastTouchY = yPoint;			String startTouchUrl = String.format("javascript:android.selection.setEndPos(%f, %f);", xPoint,yPoint);			this.loadUrl(startTouchUrl);			// Only account for legitimate movement.			if (Math.abs(mScrollDiffX) > 10 || Math.abs(mScrollDiffY) > 10) {							}		}		return false;	}	/**	 * Returns the density independent value of the given float	 * 	 * @param val	 * @param ctx	 * @return	 */	public float getDensityIndependentValue(float val, Context ctx) {		Display display = ((WindowManager) ctx				.getSystemService(Context.WINDOW_SERVICE)).getDefaultDisplay();		DisplayMetrics metrics = new DisplayMetrics();		display.getMetrics(metrics);		return val / (metrics.densityDpi / 160f);	}}